#include <stdio.h>

struct Process {
    int pid;
    int burstTime;
    int arrivalTime;
    int waitingTime;
    int turnaroundTime;
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int remainingTime[n];
    for (int i = 0; i < n; i++) {
        remainingTime[i] = processes[i].burstTime;
    }
    int completed = 0;

    while (completed < n) {
        int shortestJob = -1;
        int shortestTime = 9999;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && remainingTime[i] < shortestTime && remainingTime[i] > 0) {
                shortestJob = i;
                shortestTime = remainingTime[i];
            }
        }

        if (shortestJob == -1) {
            currentTime++;
        } else {
            remainingTime[shortestJob]--;
            if (remainingTime[shortestJob] == 0) {
                completed++;
                processes[shortestJob].turnaroundTime = currentTime + 1 - processes[shortestJob].arrivalTime;
                processes[shortestJob].waitingTime = processes[shortestJob].turnaroundTime - processes[shortestJob].burstTime;
            }
            currentTime++;
        }
    }
}

void displayResults(struct Process processes[], int n) {
    printf("PID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid, processes[i].arrivalTime, processes[i].burstTime,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }

    float averageWaitingTime = 0, averageTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        averageWaitingTime += processes[i].waitingTime;
        averageTurnaroundTime += processes[i].turnaroundTime;
    }
    averageWaitingTime /= n;
    averageTurnaroundTime /= n;

    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        processes[i].arrivalTime = 0;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    calculateTimes(processes, n);
    displayResults(processes, n);

    return 0;
}
