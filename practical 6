#include <stdio.h>

struct Process {
    int pid;
    int burstTime;
    int arrivalTime;
    int priority;
    int remainingTime;
    int startTime;
    int waitingTime;
    int turnaroundTime;
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int prevProcess = -1;

    while (completed < n) {
        int highestPriority = 9999; // Lower value indicates higher priority
        int highestPriorityProcess = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].priority < highestPriority && processes[i].remainingTime > 0) {
                highestPriority = processes[i].priority;
                highestPriorityProcess = i;
            }
        }

        if (highestPriorityProcess == -1) {
            currentTime++;
        } else {
            if (prevProcess != -1 && prevProcess != highestPriorityProcess) {
                // If a different process was executing and we're switching to a new process
                processes[prevProcess].startTime = currentTime;
            } else if (prevProcess == -1) {
                // If no process was executing, set the start time for the new process
                processes[highestPriorityProcess].startTime = currentTime;
            }

            processes[highestPriorityProcess].remainingTime--;

            if (processes[highestPriorityProcess].remainingTime == 0) {
                completed++;
                int processIndex = highestPriorityProcess;
                processes[processIndex].turnaroundTime = currentTime + 1 - processes[processIndex].arrivalTime;
                processes[processIndex].waitingTime = processes[processIndex].turnaroundTime - processes[processIndex].burstTime;
            }

            prevProcess = highestPriorityProcess;
            currentTime++;
        }
    }
}

void displayResults(struct Process processes[], int n) {
    printf("PID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid, processes[i].arrivalTime, processes[i].burstTime, processes[i].priority,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }

    float averageWaitingTime = 0, averageTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        averageWaitingTime += processes[i].waitingTime;
        averageTurnaroundTime += processes[i].turnaroundTime;
    }
    averageWaitingTime /= n;
    averageTurnaroundTime /= n;

    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].startTime = -1;
    }

    calculateTimes(processes, n);
    displayResults(processes, n);

    return 0;
}
